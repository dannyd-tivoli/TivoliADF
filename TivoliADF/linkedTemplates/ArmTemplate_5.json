{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "TivoliADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AOM_Jobs_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Tivoli Data Warehouse"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TivoliAPI_db",
								"type": "DatasetReference"
							},
							"name": "topsjobs"
						},
						{
							"dataset": {
								"referenceName": "TivoliAPI_db",
								"type": "DatasetReference"
							},
							"name": "Groups"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactTops",
								"type": "DatasetReference"
							},
							"name": "FactSync"
						},
						{
							"dataset": {
								"referenceName": "AOMGroup",
								"type": "DatasetReference"
							},
							"name": "DimAOMGroup"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Staging"
						},
						{
							"name": "AlterRowSettings"
						},
						{
							"name": "SelectFields"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastRunDate as string (\"2022-05-09 00:00:00\")",
						"}",
						"source(output(",
						"          ID as integer,",
						"          AOMGroupID as integer,",
						"          DateAddedID as integer,",
						"          TimeAddedID as integer,",
						"          LastModifiedDateID as integer,",
						"          LastModifiedTimeID as integer,",
						"          JobID as integer,",
						"          Title as string,",
						"          Reference as string,",
						"          DateCreatedID as integer,",
						"          TimeCreatedID as integer,",
						"          DateModifiedID as integer,",
						"          TimeModifiedID as integer,",
						"          DispatchDateID as integer,",
						"          DueDateID as integer,",
						"          CurrentStatus as string,",
						"          CompletedBy as string,",
						"          IsCompleted as boolean,",
						"          DateCompletedID as integer,",
						"          TimeCompletedID as integer,",
						"          Address as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          ManagerName as string,",
						"          SupervisorName as string,",
						"          TeamLeaderName as string,",
						"          ApprovalStatus as string,",
						"          ApprovalDateID as integer,",
						"          ApprovalTimeID as integer,",
						"          ApprovedBy as string,",
						"          ApprovalComments as string,",
						"          TemplateName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     inputs:['@LastModifedDate' -> ($LastRunDate)],",
						"     procedureName: 'sp_tops_jobs_DW',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure') ~> topsjobs",
						"source(output(",
						"          ID as integer,",
						"          GroupReference as string,",
						"          GroupCode as string,",
						"          GroupName as string,",
						"          Deleted as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ID]\\n      ,[GroupReference]\\n      ,[GroupCode]\\n      ,[GroupName]\\n      ,[Deleted]\\n  FROM [AOM].[tbl_AOM_Groups]',",
						"     format: 'query') ~> Groups",
						"topsjobs derive(LastModifiedDateTime = currentUTC('GMT')) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          ID,",
						"          AOMGroupID,",
						"          DateAddedID,",
						"          TimeAddedID,",
						"          LastModifiedDateID,",
						"          LastModifiedTimeID,",
						"          JobID,",
						"          Title,",
						"          Reference,",
						"          DateCreatedID,",
						"          TimeCreatedID,",
						"          DateModifiedID,",
						"          TimeModifiedID,",
						"          DispatchDateID,",
						"          DueDateID,",
						"          CurrentStatus,",
						"          CompletedBy,",
						"          IsCompleted,",
						"          DateCompletedID,",
						"          TimeCompletedID,",
						"          Address,",
						"          Latitude,",
						"          Longitude,",
						"          ManagerName,",
						"          SupervisorName,",
						"          TeamLeaderName,",
						"          ApprovalStatus,",
						"          ApprovalDateID,",
						"          ApprovalTimeID,",
						"          ApprovedBy,",
						"          ApprovalComments,",
						"          TemplateName,",
						"          LastModifiedDateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Staging",
						"Staging alterRow(upsertIf(true())) ~> AlterRowSettings",
						"Groups select(mapColumn(",
						"          ID,",
						"          GroupReference,",
						"          GroupCode,",
						"          GroupName,",
						"          Deleted",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFields",
						"SelectFields alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRowSettings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          AOMGroupID as integer,",
						"          DateAddedID as integer,",
						"          TimeAddedID as integer,",
						"          LastModifiedDateID as integer,",
						"          LastModifiedTimeID as integer,",
						"          JobID as integer,",
						"          Title as string,",
						"          Reference as string,",
						"          DateCreatedID as integer,",
						"          TimeCreatedID as integer,",
						"          DateModifiedID as integer,",
						"          TimeModifiedID as integer,",
						"          DispatchDateID as integer,",
						"          DueDateID as integer,",
						"          CurrentStatus as string,",
						"          CompletedBy as string,",
						"          IsCompleted as boolean,",
						"          DateCompletedID as integer,",
						"          TimeCompletedID as integer,",
						"          Address as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          ManagerName as string,",
						"          SupervisorName as string,",
						"          TeamLeaderName as string,",
						"          ApprovalStatus as string,",
						"          ApprovalDateID as integer,",
						"          ApprovalTimeID as integer,",
						"          ApprovedBy as string,",
						"          ApprovalComments as string,",
						"          TemplateName as string,",
						"          LastModifiedDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     batchSize: 10000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          AOMGroupID,",
						"          DateAddedID,",
						"          TimeAddedID,",
						"          LastModifiedDateID,",
						"          LastModifiedTimeID,",
						"          JobID,",
						"          Title,",
						"          Reference,",
						"          DateCreatedID,",
						"          TimeCreatedID,",
						"          DateModifiedID,",
						"          TimeModifiedID,",
						"          DispatchDateID,",
						"          DueDateID,",
						"          CurrentStatus,",
						"          CompletedBy,",
						"          IsCompleted,",
						"          DateCompletedID,",
						"          TimeCompletedID,",
						"          Address,",
						"          Latitude,",
						"          Longitude,",
						"          ManagerName,",
						"          SupervisorName,",
						"          TeamLeaderName,",
						"          ApprovalStatus,",
						"          ApprovalDateID,",
						"          ApprovalTimeID,",
						"          ApprovedBy,",
						"          ApprovalComments,",
						"          TemplateName,",
						"          LastModifiedDateTime",
						"     )) ~> FactSync",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          GroupReference as string,",
						"          GroupCode as string,",
						"          GroupName as string,",
						"          Deleted as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          GroupReference,",
						"          GroupCode,",
						"          GroupName,",
						"          Deleted",
						"     )) ~> DimAOMGroup"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_QEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Tivoli Data Warehouse"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PowerBI_db",
								"type": "DatasetReference"
							},
							"name": "QEWDetail"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Project"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactQEW",
								"type": "DatasetReference"
							},
							"name": "FactSync"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Staging"
						},
						{
							"name": "AlterRowSettings"
						},
						{
							"name": "ProjectLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastRunDate as string (\"2022-05-09 00:00:00\")",
						"}",
						"source(output(",
						"          QuoteID as integer,",
						"          QEWDetailsID as integer,",
						"          RowNo as long,",
						"          OrganisationGroup as string,",
						"          Reference as string,",
						"          DateCreated as date,",
						"          DateCreatedID as integer,",
						"          TimeCreatedID as integer,",
						"          CompletedBy as string,",
						"          WorkDescription as string,",
						"          Site as string,",
						"          ClientContactName as string,",
						"          ClientContactNo as string,",
						"          ClientContactEmail as string,",
						"          ProjectCode as string,",
						"          QuoteStatus as string,",
						"          LastModifiedDateID as integer,",
						"          LastModifiedTimeID as integer,",
						"          TivoliNotes as string,",
						"          ClientComments as string,",
						"          CancelledReason as string,",
						"          ClientPONumber as string,",
						"          EWJobRaisedDateID as integer,",
						"          EWJobRaisedTimeID as integer,",
						"          EWJobReference as string,",
						"          EWJobID as integer,",
						"          EWJobStatus as string,",
						"          EWJobAllocatedTo as string,",
						"          EWJobCompletedDateID as integer,",
						"          EWJobCompletedTimeID as integer,",
						"          EWJobRejectedReason as string,",
						"          ApprovedDateID as integer,",
						"          ApprovedTimeID as integer,",
						"          AdditionalSiteInformation as string,",
						"          SiteAddress as string,",
						"          PostCode as string,",
						"          ClientApprover as string,",
						"          InvoiceNumber as string,",
						"          ItemClass as string,",
						"          ItemType as string,",
						"          Description as string,",
						"          Supplier as string,",
						"          CostRate as decimal(18,2),",
						"          Qty as decimal(18,6),",
						"          MarkupPerc as decimal(18,2),",
						"          RowAddedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     inputs:['@LastModifedDate' -> ($LastRunDate)],",
						"     procedureName: 'sp_QEW_DW',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure') ~> QEWDetail",
						"source(output(",
						"          ProjectID as integer,",
						"          ProjectCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ProjectID]\\n      ,[ProjectCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimProject]',",
						"     format: 'query') ~> Project",
						"ProjectLookup derive(LastModifiedDateTime = currentUTC('GMT'),",
						"          NewProjectID = iif(isNull(ProjectID), -1, ProjectID)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          QuoteID,",
						"          QEWDetailsID,",
						"          RowNo,",
						"          OrganisationGroup,",
						"          Reference,",
						"          DateCreated,",
						"          DateCreatedID,",
						"          TimeCreatedID,",
						"          CompletedBy,",
						"          WorkDescription,",
						"          Site,",
						"          ClientContactName,",
						"          ClientContactNo,",
						"          ClientContactEmail,",
						"          ProjectCode = QEWDetail@ProjectCode,",
						"          QuoteStatus,",
						"          LastModifiedDateID,",
						"          LastModifiedTimeID,",
						"          TivoliNotes,",
						"          ClientComments,",
						"          CancelledReason,",
						"          ClientPONumber,",
						"          EWJobRaisedDateID,",
						"          EWJobRaisedTimeID,",
						"          EWJobReference,",
						"          EWJobID,",
						"          EWJobStatus,",
						"          EWJobAllocatedTo,",
						"          EWJobCompletedDateID,",
						"          EWJobCompletedTimeID,",
						"          EWJobRejectedReason,",
						"          ApprovedDateID,",
						"          ApprovedTimeID,",
						"          AdditionalSiteInformation,",
						"          SiteAddress,",
						"          PostCode,",
						"          ClientApprover,",
						"          InvoiceNumber,",
						"          ItemClass,",
						"          ItemType,",
						"          Description,",
						"          Supplier,",
						"          CostRate,",
						"          Qty,",
						"          MarkupPerc,",
						"          RowAddedDate,",
						"          ProjectCode = Project@ProjectCode,",
						"          FromDate,",
						"          ToDate,",
						"          LastModifiedDateTime,",
						"          ProjectID = NewProjectID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Staging",
						"Staging alterRow(upsertIf(true())) ~> AlterRowSettings",
						"QEWDetail, Project lookup(QEWDetail@ProjectCode == Project@ProjectCode",
						"     && DateCreated >= FromDate",
						"     && DateCreated <= ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ProjectLookup",
						"AlterRowSettings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          DateCreatedID as integer,",
						"          TimeCreatedID as integer,",
						"          LastModifiedDateID as integer,",
						"          LastModifiedTimeID as integer,",
						"          EWJobRaisedDateID as integer,",
						"          EWJobRaisedTimeID as integer,",
						"          EWJobCompletedDateID as integer,",
						"          EWJobCompletedTimeID as integer,",
						"          ApprovedDateID as integer,",
						"          ApprovedTimeID as integer,",
						"          QuoteID as integer,",
						"          QEWDetailsID as integer,",
						"          ProjectID as integer,",
						"          RowNo as long,",
						"          OrganisationGroup as string,",
						"          Reference as string,",
						"          CompletedBy as string,",
						"          WorkDescription as string,",
						"          Site as string,",
						"          ClientContactName as string,",
						"          ClientContactNo as string,",
						"          ClientContactEmail as string,",
						"          QuoteStatus as string,",
						"          TivoliNotes as string,",
						"          ClientComments as string,",
						"          CancelledReason as string,",
						"          ClientPONumber as string,",
						"          EWJobReference as string,",
						"          EWJobID as integer,",
						"          EWJobStatus as string,",
						"          EWJobAllocatedTo as string,",
						"          EWJobRejectedReason as string,",
						"          AdditionalSiteInformation as string,",
						"          SiteAddress as string,",
						"          ClientApprover as string,",
						"          InvoiceNumber as string,",
						"          ItemClass as string,",
						"          ItemType as string,",
						"          Description as string,",
						"          Supplier as string,",
						"          CostRate as decimal(18,2),",
						"          Qty as decimal(18,6),",
						"          MarkupPerc as decimal(18,2),",
						"          RowAddedDate as timestamp,",
						"          LastModifiedDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['QuoteID','QEWDetailsID'],",
						"     format: 'table',",
						"     batchSize: 10000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateCreatedID,",
						"          TimeCreatedID,",
						"          LastModifiedDateID,",
						"          LastModifiedTimeID,",
						"          EWJobRaisedDateID,",
						"          EWJobRaisedTimeID,",
						"          EWJobCompletedDateID,",
						"          EWJobCompletedTimeID,",
						"          ApprovedDateID,",
						"          ApprovedTimeID,",
						"          QuoteID,",
						"          QEWDetailsID,",
						"          ProjectID,",
						"          RowNo,",
						"          OrganisationGroup,",
						"          Reference,",
						"          CompletedBy,",
						"          WorkDescription,",
						"          Site,",
						"          ClientContactName,",
						"          ClientContactNo,",
						"          ClientContactEmail,",
						"          QuoteStatus,",
						"          TivoliNotes,",
						"          ClientComments,",
						"          CancelledReason,",
						"          ClientPONumber,",
						"          EWJobReference,",
						"          EWJobID,",
						"          EWJobStatus,",
						"          EWJobAllocatedTo,",
						"          EWJobRejectedReason,",
						"          AdditionalSiteInformation,",
						"          SiteAddress,",
						"          ClientApprover,",
						"          InvoiceNumber,",
						"          ItemClass,",
						"          ItemType,",
						"          Description,",
						"          Supplier,",
						"          CostRate,",
						"          Qty,",
						"          MarkupPerc,",
						"          RowAddedDate,",
						"          LastModifiedDateTime",
						"     )) ~> FactSync"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oa_fact_GeneralLedger_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Tivoli Data Warehouse"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Reception_db",
								"type": "DatasetReference"
							},
							"name": "nltrans"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "CostCentre"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "DocumentType"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "TransactionType"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "ActivityCode"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Supplier"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactGL",
								"type": "DatasetReference"
							},
							"name": "FactSync"
						}
					],
					"transformations": [
						{
							"name": "CosstCentreLookup"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Staging"
						},
						{
							"name": "DocTypeLookup"
						},
						{
							"name": "TransactionTypeLookup"
						},
						{
							"name": "AlterRowSettings"
						},
						{
							"name": "ActivityCodeLookup"
						},
						{
							"name": "CustomerLookup"
						},
						{
							"name": "SupplierLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastRunDate as string (\"2022-05-09 00:00:00\")",
						"}",
						"source(output(",
						"          ID as integer,",
						"          unqkey as string,",
						"          {doc-id} as string,",
						"          docdate as date,",
						"          sourceacc as string,",
						"          sourceref as string,",
						"          orderref as string,",
						"          originref as string,",
						"          description as string,",
						"          baseval as decimal(17,2),",
						"          daybook as boolean,",
						"          currvalue as decimal(17,2),",
						"          qty as decimal(18,3),",
						"          yearno as decimal(15,0),",
						"          period as decimal(15,0),",
						"          batchref as string,",
						"          trtyp as string,",
						"          uuserid as string,",
						"          inputdate as date,",
						"          inputtime as integer,",
						"          stat as string,",
						"          costcentre as string,",
						"          expensecode as string,",
						"          docnumber as integer,",
						"          {vat-code} as string,",
						"          transdate as date,",
						"          {nrv-value} as decimal(17,2),",
						"          secval as decimal(17,2),",
						"          line_no as integer,",
						"          postdate as date,",
						"          qunit as string,",
						"          upuser as string,",
						"          upddate as date,",
						"          updtime as integer,",
						"          UpdatedDateTime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     inputs:['@LastModifedDate' -> ($LastRunDate)],",
						"     procedureName: 'sp_oa_nltrans_DW',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure') ~> nltrans",
						"source(output(",
						"          CostCentreID as integer,",
						"          CostCentre as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [CostCentreID]\\n      ,[CostCentre]\\n      ,[FromDate]\\n      ,[ToDate]\\n       FROM [DW].[DimCostCentre]',",
						"     format: 'query') ~> CostCentre",
						"source(output(",
						"          DocumentTypeID as integer,",
						"          DocID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [DocumentTypeID]\\n      ,[DocID]\\n  FROM [DW].[DimDocumentType]',",
						"     format: 'query') ~> DocumentType",
						"source(output(",
						"          TransactionTypeID as integer,",
						"          trtyp as string,",
						"          LedgerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT[TransactionTypeID]\\n      ,[trtyp], [LedgerCode]\\n  FROM [DW].[DimTransactionType]',",
						"     format: 'query') ~> TransactionType",
						"source(output(",
						"          ActivityCodeID as integer,",
						"          ActivityCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ActivityCodeID]\\n      ,[ActivityCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimActivityCode]',",
						"     format: 'query') ~> ActivityCode",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerCode as string,",
						"          FromDate as date,",
						"          ToDate as date,",
						"          LedgerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT[CustomerID]\\n      ,[CustomerCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n       ,\\'SL\\' AS [LedgerCode]\\n FROM [DW].[DimCustomer]',",
						"     format: 'query') ~> Customer",
						"source(output(",
						"          SupplierID as integer,",
						"          SupplierCode as string,",
						"          FromDate as date,",
						"          ToDate as date,",
						"          LedgerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [SupplierID]\\n      ,[SupplierCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n       ,\\'PL\\' AS [LedgerCode]\\n  FROM [DW].[DimSupplier]',",
						"     format: 'query') ~> Supplier",
						"DocTypeLookup, CostCentre lookup(nltrans@costcentre == CostCentre@CostCentre",
						"     && docdate >= FromDate",
						"     && docdate <= ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> CosstCentreLookup",
						"SupplierLookup derive(NewCostCentreID = iif(isNull(CostCentreID), -1,CostCentreID),",
						"          NewDocumentID = iif(isNull(DocumentTypeID), -1, DocumentTypeID),",
						"          NewTransactionTypeID = iif(isNull(TransactionTypeID), -1, TransactionTypeID),",
						"          LastModifiedDate = currentUTC('GMT'),",
						"          NewActivityCodeID = iif(isNull(ActivityCodeID), -1, ActivityCodeID),",
						"          DocumentDateID = toInteger(toString(docdate, 'yyyyMMdd')),",
						"          InputDateID = toInteger(toString(inputdate, 'yyyyMMdd')),",
						"          TransactionDateID = toInteger(toString(transdate, 'yyyyMMdd')),",
						"          YearNo = toInteger(yearno),",
						"          Period = toInteger(period)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          unqkey,",
						"          DocumentDateID,",
						"          CostCentreID = NewCostCentreID,",
						"          DocumentTypeID = NewDocumentID,",
						"          TransactionTypeID = NewTransactionTypeID,",
						"          LastModifiedDateTime = LastModifiedDate,",
						"          ActivityCodeID = NewActivityCodeID,",
						"          CustomerID,",
						"          SupplierID,",
						"          SourceReference = sourceref,",
						"          OrderReference = orderref,",
						"          OriginReference = originref,",
						"          Description = description,",
						"          BaseValue = baseval,",
						"          CurrentValue = currvalue,",
						"          Quantity = qty,",
						"          QuantityUnits = qunit,",
						"          YearNo = DerivedColumns@YearNo,",
						"          Period = DerivedColumns@Period,",
						"          BatchReference = batchref,",
						"          InputDateID,",
						"          InputTimeID = inputtime,",
						"          DocumentNumber = docnumber,",
						"          VatCode = {vat-code},",
						"          LineNo = line_no,",
						"          TransactionDateID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Staging",
						"nltrans, DocumentType lookup({doc-id} == DocID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> DocTypeLookup",
						"CosstCentreLookup, TransactionType lookup(nltrans@trtyp == TransactionType@trtyp,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> TransactionTypeLookup",
						"Staging alterRow(upsertIf(true())) ~> AlterRowSettings",
						"TransactionTypeLookup, ActivityCode lookup(expensecode == ActivityCode",
						"     && docdate >= ActivityCode@FromDate",
						"     && docdate <= ActivityCode@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ActivityCodeLookup",
						"ActivityCodeLookup, Customer lookup(sourceacc == CustomerCode",
						"     && docdate >= Customer@FromDate",
						"     && docdate <= Customer@ToDate",
						"     && TransactionType@LedgerCode == Customer@LedgerCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> CustomerLookup",
						"CustomerLookup, Supplier lookup(sourceacc == SupplierCode",
						"     && docdate >= Supplier@FromDate",
						"     && docdate <= Supplier@ToDate",
						"     && TransactionType@LedgerCode == Supplier@LedgerCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> SupplierLookup",
						"AlterRowSettings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          unqkey as string,",
						"          BatchReference as string,",
						"          DocumentNumber as integer,",
						"          LineNo as integer,",
						"          CostCentreID as integer,",
						"          DocumentTypeID as integer,",
						"          TransactionTypeID as integer,",
						"          ActivityCodeID as integer,",
						"          TransactionDateID as integer,",
						"          DocumentDateID as integer,",
						"          InputDateID as integer,",
						"          InputTimeID as integer,",
						"          CustomerID as integer,",
						"          SupplierID as integer,",
						"          YearNo as integer,",
						"          Period as integer,",
						"          SourceReference as string,",
						"          OrderReference as string,",
						"          OriginReference as string,",
						"          Description as string,",
						"          BaseValue as decimal(18,2),",
						"          CurrentValue as decimal(18,2),",
						"          Quantity as decimal(18,3),",
						"          QuantityUnits as string,",
						"          VatCode as string,",
						"          LastModifiedDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['unqkey'],",
						"     format: 'table',",
						"     batchSize: 10000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          unqkey,",
						"          BatchReference,",
						"          DocumentNumber,",
						"          LineNo,",
						"          CostCentreID,",
						"          DocumentTypeID,",
						"          TransactionTypeID,",
						"          ActivityCodeID,",
						"          TransactionDateID,",
						"          DocumentDateID,",
						"          InputDateID,",
						"          InputTimeID,",
						"          CustomerID,",
						"          SupplierID,",
						"          YearNo,",
						"          Period,",
						"          SourceReference,",
						"          OrderReference,",
						"          OriginReference,",
						"          Description,",
						"          BaseValue,",
						"          CurrentValue,",
						"          Quantity,",
						"          QuantityUnits,",
						"          VatCode,",
						"          LastModifiedDateTime",
						"     )) ~> FactSync"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oa_fact_ProjectTransactions_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Tivoli Data Warehouse"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Reception_db",
								"type": "DatasetReference"
							},
							"name": "pctrans"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "CostCentre"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "DocumentType"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "TransactionType"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "ActivityCode"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "WorkStage"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Project"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactPT",
								"type": "DatasetReference"
							},
							"name": "FactSync"
						}
					],
					"transformations": [
						{
							"name": "CosstCentreLookup"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Staging"
						},
						{
							"name": "DocTypeLookup"
						},
						{
							"name": "TransactionTypeLookup"
						},
						{
							"name": "AlterRowSettings"
						},
						{
							"name": "ActivityCodeLookup"
						},
						{
							"name": "WorkStageLookup"
						},
						{
							"name": "ProjectLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastRunDate as string (\"2022-05-09 00:00:00\")",
						"}",
						"source(output(",
						"          ID as integer,",
						"          {doc-id} as string,",
						"          docnumber as integer,",
						"          line_no as integer,",
						"          docdate as date,",
						"          sourceacc as string,",
						"          description as string,",
						"          baseval as decimal(17,2),",
						"          daybook as boolean,",
						"          currvalue as decimal(17,2),",
						"          qty as decimal(18,3),",
						"          yearno as decimal(15,0),",
						"          period as decimal(15,0),",
						"          batchref as string,",
						"          trtyp as string,",
						"          uuserid as string,",
						"          inputdate as date,",
						"          stat as string,",
						"          project as string,",
						"          panlcode as string,",
						"          del as boolean,",
						"          currency as string,",
						"          secval as decimal(17,2),",
						"          qunit as string,",
						"          workstage as string,",
						"          resource as string,",
						"          unqkey as string,",
						"          costcentre as string,",
						"          expensecode as string,",
						"          upuser as string,",
						"          upddate as date,",
						"          updtime as integer,",
						"          product as string,",
						"          sourceref as string,",
						"          {vat-code} as string,",
						"          UpdatedDateTime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     inputs:['@LastModifedDate' -> ($LastRunDate)],",
						"     procedureName: 'sp_oa_pctrans_DW',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure') ~> pctrans",
						"source(output(",
						"          CostCentreID as integer,",
						"          CostCentre as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [CostCentreID]\\n      ,[CostCentre]\\n      ,[FromDate]\\n      ,[ToDate]\\n       FROM [DW].[DimCostCentre]',",
						"     format: 'query') ~> CostCentre",
						"source(output(",
						"          DocumentTypeID as integer,",
						"          DocID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [DocumentTypeID]\\n      ,[DocID]\\n  FROM [DW].[DimDocumentType]',",
						"     format: 'query') ~> DocumentType",
						"source(output(",
						"          TransactionTypeID as integer,",
						"          trtyp as string,",
						"          LedgerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT[TransactionTypeID]\\n      ,[trtyp], [LedgerCode]\\n  FROM [DW].[DimTransactionType]',",
						"     format: 'query') ~> TransactionType",
						"source(output(",
						"          ActivityCodeID as integer,",
						"          ActivityCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ActivityCodeID]\\n      ,[ActivityCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimActivityCode]',",
						"     format: 'query') ~> ActivityCode",
						"source(output(",
						"          WorkStageID as integer,",
						"          WorkStageCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [WorkStageID]\\n      ,[WorkStageCode]\\n       ,[FromDate]\\n       ,[ToDate]\\n  FROM [DW].[DimWorkStage]',",
						"     format: 'query') ~> WorkStage",
						"source(output(",
						"          ProjectID as integer,",
						"          ProjectCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ProjectID]\\n      ,[ProjectCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimProject]',",
						"     format: 'query') ~> Project",
						"DocTypeLookup, CostCentre lookup(pctrans@costcentre == CostCentre@CostCentre",
						"     && docdate >= FromDate",
						"     && docdate <= ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> CosstCentreLookup",
						"ProjectLookup derive(NewCostCentreID = iif(isNull(CostCentreID), -1,CostCentreID),",
						"          NewDocumentID = iif(isNull(DocumentTypeID), -1, DocumentTypeID),",
						"          NewTransactionTypeID = iif(isNull(TransactionTypeID), -1, TransactionTypeID),",
						"          LastModifiedDate = currentUTC('GMT'),",
						"          NewActivityCodeID = iif(isNull(ActivityCodeID), -1, ActivityCodeID),",
						"          DocumentDateID = toInteger(toString(docdate, 'yyyyMMdd')),",
						"          InputDateID = toInteger(toString(inputdate, 'yyyyMMdd')),",
						"          YearNo = toInteger(yearno),",
						"          Period = toInteger(period),",
						"          NewWorkStageID = iif(isNull(WorkStageID), -1, WorkStageID),",
						"          NewProjectID = iif(isNull(ProjectID), -1, ProjectID)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          unqkey,",
						"          DocumentDateID,",
						"          CostCentreID = NewCostCentreID,",
						"          DocumentTypeID = NewDocumentID,",
						"          TransactionTypeID = NewTransactionTypeID,",
						"          LastModifiedDateTime = LastModifiedDate,",
						"          ActivityCodeID = NewActivityCodeID,",
						"          SourceReference = sourceref,",
						"          Description = description,",
						"          BaseValue = baseval,",
						"          CurrentValue = currvalue,",
						"          Quantity = qty,",
						"          QuantityUnits = qunit,",
						"          YearNo = DerivedColumns@YearNo,",
						"          Period = DerivedColumns@Period,",
						"          BatchReference = batchref,",
						"          InputDateID,",
						"          DocumentNumber = docnumber,",
						"          VatCode = {vat-code},",
						"          LineNo = line_no,",
						"          ProjectID = NewProjectID,",
						"          WorkStageID = NewWorkStageID,",
						"          Currency = currency,",
						"          Resource = resource,",
						"          unqkey,",
						"          Deleted = del",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Staging",
						"pctrans, DocumentType lookup({doc-id} == DocID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> DocTypeLookup",
						"CosstCentreLookup, TransactionType lookup(pctrans@trtyp == TransactionType@trtyp,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> TransactionTypeLookup",
						"Staging alterRow(upsertIf(true())) ~> AlterRowSettings",
						"TransactionTypeLookup, ActivityCode lookup(expensecode == ActivityCode",
						"     && docdate >= ActivityCode@FromDate",
						"     && docdate <= ActivityCode@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ActivityCodeLookup",
						"ActivityCodeLookup, WorkStage lookup(workstage == WorkStageCode",
						"     && docdate >= WorkStage@FromDate",
						"     && docdate <= WorkStage@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> WorkStageLookup",
						"WorkStageLookup, Project lookup(project == ProjectCode",
						"     && docdate >= Project@FromDate",
						"     && docdate <= Project@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ProjectLookup",
						"AlterRowSettings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          unqkey as string,",
						"          CostCentreID as integer,",
						"          DocumentTypeID as integer,",
						"          TransactionTypeID as integer,",
						"          ActivityCodeID as integer,",
						"          WorkStageID as integer,",
						"          ProjectID as integer,",
						"          DocumentDateID as integer,",
						"          InputDateID as integer,",
						"          BatchReference as string,",
						"          DocumentNumber as integer,",
						"          LineNo as integer,",
						"          YearNo as integer,",
						"          Period as integer,",
						"          SourceReference as string,",
						"          Description as string,",
						"          BaseValue as decimal(18,2),",
						"          CurrentValue as decimal(18,2),",
						"          Quantity as decimal(18,3),",
						"          QuantityUnits as string,",
						"          VatCode as string,",
						"          Resource as string,",
						"          Currency as string,",
						"          Deleted as boolean,",
						"          LastModifiedDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['unqkey'],",
						"     format: 'table',",
						"     batchSize: 10000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          unqkey,",
						"          CostCentreID,",
						"          DocumentTypeID,",
						"          TransactionTypeID,",
						"          ActivityCodeID,",
						"          WorkStageID,",
						"          ProjectID,",
						"          DocumentDateID,",
						"          InputDateID,",
						"          BatchReference,",
						"          DocumentNumber,",
						"          LineNo,",
						"          YearNo,",
						"          Period,",
						"          SourceReference,",
						"          Description,",
						"          BaseValue,",
						"          CurrentValue,",
						"          Quantity,",
						"          QuantityUnits,",
						"          VatCode,",
						"          Resource,",
						"          Currency,",
						"          Deleted,",
						"          LastModifiedDateTime",
						"     )) ~> FactSync"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oa_fact_PurchaseOrder_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Tivoli Data Warehouse"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Reception_db",
								"type": "DatasetReference"
							},
							"name": "podetail"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Supplier"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "ActivityCode"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "WorkStage"
						},
						{
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference"
							},
							"name": "Project"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactPO",
								"type": "DatasetReference"
							},
							"name": "FactSync"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumns"
						},
						{
							"name": "Staging"
						},
						{
							"name": "AlterRowSettings"
						},
						{
							"name": "WorkStageLookup"
						},
						{
							"name": "ProjectLookup"
						},
						{
							"name": "SupplierLookup"
						},
						{
							"name": "ActivityCodeLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastRunDate as string (\"2022-05-09 00:00:00\")",
						"}",
						"source(output(",
						"          OrderNumber as integer,",
						"          OrderReference as string,",
						"          SupplierCode as string,",
						"          OrderDate as date,",
						"          RevDate as date,",
						"          OrderValue as decimal(17,2),",
						"          CreatedDate as date,",
						"          OrderStatus as string,",
						"          DeliveryPostCode as string,",
						"          Branch as string,",
						"          RecordType as string,",
						"          OutstandingValue as decimal(17,2),",
						"          CustomerReference as string,",
						"          CurrencyCode as string,",
						"          CurrencyRate as decimal(21,6),",
						"          OrderBaseValue as decimal(17,2),",
						"          OrderBaseOutstanding as decimal(17,2),",
						"          Period as integer,",
						"          Year as string,",
						"          CreatedTimeID as integer,",
						"          EndDate as date,",
						"          RequestedBy as string,",
						"          DeliveryAddress as string,",
						"          InvoiceAddress as string,",
						"          OrderAddress as string,",
						"          OrderPostCode as string,",
						"          MatchDate as date,",
						"          LineNo as integer,",
						"          LineTotal as decimal(17,2),",
						"          Price as decimal(17,5),",
						"          Discount as decimal(17,2),",
						"          Quantity as decimal(18,3),",
						"          OutStandingTotal as decimal(17,2),",
						"          ItemDescription as string,",
						"          Units as string,",
						"          VatCode as string,",
						"          ActivityCode as string,",
						"          OutstandingQty as decimal(18,3),",
						"          LineStatus as string,",
						"          AllocatedQty as decimal(18,3),",
						"          DispatchedQty as decimal(18,3),",
						"          UnderPickedQty as decimal(18,3),",
						"          NewPrice as decimal(17,5),",
						"          BaseValue as decimal(17,2),",
						"          BaseValueOutstanding as decimal(17,2),",
						"          DueDate as date,",
						"          BasePrice as decimal(17,5),",
						"          Project as string,",
						"          AmendmentDate as date,",
						"          Workstage as string,",
						"          OALastModifiedDateTime as string,",
						"          UpdatedDateTime as timestamp,",
						"          OrderDateID as integer,",
						"          RevDateID as integer,",
						"          CreatedDateID as integer,",
						"          MatchDateID as integer,",
						"          DueDateID as integer,",
						"          AmendmentDateID as integer,",
						"          EndDateID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     inputs:['@LastModifedDate' -> ($LastRunDate)],",
						"     procedureName: 'sp_oa_podetail_DW',",
						"     schemaName: 'dbo',",
						"     resultSet: true,",
						"     format: 'procedure') ~> podetail",
						"source(output(",
						"          SupplierID as integer,",
						"          SupplierCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT  [SupplierID]\\n      ,[SupplierCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimSupplier]',",
						"     format: 'query') ~> Supplier",
						"source(output(",
						"          ActivityCodeID as integer,",
						"          ActivityCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ActivityCodeID]\\n      ,[ActivityCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimActivityCode]',",
						"     format: 'query') ~> ActivityCode",
						"source(output(",
						"          WorkStageID as integer,",
						"          WorkStageCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [WorkStageID]\\n      ,[WorkStageCode]\\n       ,[FromDate]\\n       ,[ToDate]\\n  FROM [DW].[DimWorkStage]',",
						"     format: 'query') ~> WorkStage",
						"source(output(",
						"          ProjectID as integer,",
						"          ProjectCode as string,",
						"          FromDate as date,",
						"          ToDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT [ProjectID]\\n      ,[ProjectCode]\\n      ,[FromDate]\\n      ,[ToDate]\\n  FROM [DW].[DimProject]',",
						"     format: 'query') ~> Project",
						"ProjectLookup derive(NewSupplierID = iif(isNull(SupplierID), -1,SupplierID),",
						"          NewActivityCodeID = iif(isNull(ActivityCodeID), -1, ActivityCodeID),",
						"          LastModifiedDateTime = currentUTC('GMT'),",
						"          Period = toInteger(Period),",
						"          NewWorkStageID = iif(isNull(WorkStageID), -1, WorkStageID),",
						"          NewProjectID = iif(isNull(ProjectID), -1, ProjectID)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          OrderNumber,",
						"          OrderReference,",
						"          OrderValue,",
						"          OrderStatus,",
						"          DeliveryPostCode,",
						"          Branch,",
						"          RecordType,",
						"          OutstandingValue,",
						"          CustomerReference,",
						"          CurrencyCode,",
						"          CurrencyRate,",
						"          OrderBaseValue,",
						"          OrderBaseOutstanding,",
						"          Period,",
						"          Year,",
						"          CreatedTimeID,",
						"          RequestedBy,",
						"          DeliveryAddress,",
						"          InvoiceAddress,",
						"          OrderAddress,",
						"          OrderPostCode,",
						"          MatchDate,",
						"          LineNo,",
						"          LineTotal,",
						"          Price,",
						"          Discount,",
						"          Quantity,",
						"          OutStandingTotal,",
						"          ItemDescription,",
						"          Units,",
						"          VatCode,",
						"          OutstandingQty,",
						"          LineStatus,",
						"          AllocatedQty,",
						"          DispatchedQty,",
						"          UnderPickedQty,",
						"          NewPrice,",
						"          BaseValue,",
						"          BaseValueOutstanding,",
						"          BasePrice,",
						"          Project,",
						"          SupplierID = NewSupplierID,",
						"          ActivityCodeID = NewActivityCodeID,",
						"          WorkStageID = NewWorkStageID,",
						"          ProjectID = NewProjectID,",
						"          OrderDateID,",
						"          CreatedDateID,",
						"          MatchDateID,",
						"          DueDateID,",
						"          AmendmentDateID,",
						"          EndDateID,",
						"          LastModifiedDateTime,",
						"          RevDateID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Staging",
						"Staging alterRow(upsertIf(true())) ~> AlterRowSettings",
						"ActivityCodeLookup, WorkStage lookup(Workstage == WorkStageCode",
						"     && OrderDate >= WorkStage@FromDate",
						"     && OrderDate <= WorkStage@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> WorkStageLookup",
						"WorkStageLookup, Project lookup(Project == ProjectCode",
						"     && OrderDate >= Project@FromDate",
						"     && OrderDate <= Project@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ProjectLookup",
						"podetail, Supplier lookup(podetail@SupplierCode == Supplier@SupplierCode",
						"     && OrderDate >= FromDate",
						"     && OrderDate <= ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> SupplierLookup",
						"SupplierLookup, ActivityCode lookup(podetail@ActivityCode == ActivityCode@ActivityCode",
						"     && OrderDate >= ActivityCode@FromDate",
						"     && OrderDate <= ActivityCode@ToDate,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ActivityCodeLookup",
						"AlterRowSettings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          ActivityCodeID as integer,",
						"          SupplierID as integer,",
						"          ProjectID as integer,",
						"          WorkstageID as integer,",
						"          OrderDateID as integer,",
						"          RevDateID as integer,",
						"          CreatedDateID as integer,",
						"          CreatedTimeID as integer,",
						"          DueDateID as integer,",
						"          EndDateID as integer,",
						"          MatchDateID as integer,",
						"          AmendmentDateID as integer,",
						"          OrderNumber as integer,",
						"          OrderReference as string,",
						"          OrderValue as decimal(18,2),",
						"          OrderStatus as string,",
						"          DeliveryPostCode as string,",
						"          Branch as string,",
						"          RecordType as string,",
						"          OutstandingValue as decimal(18,2),",
						"          CustomerReference as string,",
						"          CurrencyCode as string,",
						"          CurrencyRate as decimal(21,6),",
						"          OrderBaseValue as decimal(18,2),",
						"          OrderBaseOutstanding as decimal(18,2),",
						"          Period as integer,",
						"          Year as string,",
						"          RequestedBy as string,",
						"          DeliveryAddress as string,",
						"          InvoiceAddress as string,",
						"          OrderAddress as string,",
						"          OrderPostCode as string,",
						"          LineNo as integer,",
						"          LineTotal as decimal(18,2),",
						"          Price as decimal(17,5),",
						"          Discount as decimal(18,2),",
						"          Quantity as decimal(18,3),",
						"          OutStandingTotal as decimal(18,2),",
						"          ItemDescription as string,",
						"          Units as string,",
						"          VatCode as string,",
						"          OutstandingQty as decimal(18,3),",
						"          LineStatus as string,",
						"          AllocatedQty as decimal(18,3),",
						"          DispatchedQty as decimal(18,3),",
						"          UnderPickedQty as decimal(18,3),",
						"          NewPrice as decimal(17,5),",
						"          BaseValue as decimal(18,2),",
						"          BaseValueOutstanding as decimal(18,2),",
						"          BasePrice as decimal(17,5),",
						"          LastModifiedDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Branch','RecordType','OrderNumber','LineNo'],",
						"     format: 'table',",
						"     batchSize: 10000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ActivityCodeID,",
						"          SupplierID,",
						"          ProjectID,",
						"          WorkstageID = WorkStageID,",
						"          OrderDateID,",
						"          RevDateID,",
						"          CreatedDateID,",
						"          CreatedTimeID,",
						"          DueDateID,",
						"          EndDateID,",
						"          MatchDateID,",
						"          AmendmentDateID,",
						"          OrderNumber,",
						"          OrderReference,",
						"          OrderValue,",
						"          OrderStatus,",
						"          DeliveryPostCode,",
						"          Branch,",
						"          RecordType,",
						"          OutstandingValue,",
						"          CustomerReference,",
						"          CurrencyCode,",
						"          CurrencyRate,",
						"          OrderBaseValue,",
						"          OrderBaseOutstanding,",
						"          Period,",
						"          Year,",
						"          RequestedBy,",
						"          DeliveryAddress,",
						"          InvoiceAddress,",
						"          OrderAddress,",
						"          OrderPostCode,",
						"          LineNo,",
						"          LineTotal,",
						"          Price,",
						"          Discount,",
						"          Quantity,",
						"          OutStandingTotal,",
						"          ItemDescription,",
						"          Units,",
						"          VatCode,",
						"          OutstandingQty,",
						"          LineStatus,",
						"          AllocatedQty,",
						"          DispatchedQty,",
						"          UnderPickedQty,",
						"          NewPrice,",
						"          BaseValue,",
						"          BaseValueOutstanding,",
						"          BasePrice,",
						"          LastModifiedDateTime",
						"     )) ~> FactSync"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OA_DIMAndFactLoad_PL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "GL Data from Open Accounts",
				"activities": [
					{
						"name": "LastRunDate_GL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Dim Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(ISNULL([LastRunDateTime], '1900-01-01') AS date) AS LastRunDateTime FROM [System].[Config]  WHERE setting = 'oa_nltrans'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Load OA Fact GL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set _LastDateTime_GL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "oa_fact_GeneralLedger_df",
								"type": "DataFlowReference",
								"parameters": {
									"LastRunDate": {
										"value": "'@{variables('_LastRunDateTime_GL')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"nltrans": {},
									"CostCentre": {},
									"DocumentType": {},
									"TransactionType": {},
									"ActivityCode": {},
									"Customer": {},
									"Supplier": {},
									"FactSync": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set _LastDateTime_GL",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastRunDate_GL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_LastRunDateTime_GL",
							"value": {
								"value": "@formatDateTime(activity('LastRunDate_GL').output.FirstRow.LastRunDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CurrentDate",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_CurrentDate",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateLastRunDate_GL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load OA Fact GL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[System].[sp_UpdateLastRunDateTime]",
							"storedProcedureParameters": {
								"LastRunDate": {
									"value": {
										"value": "@formatDateTime(string(variables('_CurrentDate')), 'yyyy-MM-dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Setting": {
									"value": "oa_nltrans",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CurrentDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "OA_DimLoad_PL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load OA Fact PT",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set _LastDateTime_PT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "oa_fact_ProjectTransactions_df",
								"type": "DataFlowReference",
								"parameters": {
									"LastRunDate": {
										"value": "'@{variables('_LastRunDateTime_PT')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"pctrans": {},
									"CostCentre": {},
									"DocumentType": {},
									"TransactionType": {},
									"ActivityCode": {},
									"WorkStage": {},
									"Project": {},
									"FactSync": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UpdateLastRunDate_PT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load OA Fact PT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[System].[sp_UpdateLastRunDateTime]",
							"storedProcedureParameters": {
								"LastRunDate": {
									"value": {
										"value": "@formatDateTime(string(variables('_CurrentDate')), 'yyyy-MM-dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Setting": {
									"value": "oa_pctrans",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LastRunDate_PT",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Dim Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(ISNULL([LastRunDateTime], '1900-01-01') AS date) AS LastRunDateTime FROM [System].[Config]  WHERE setting = 'oa_pctrans'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set _LastDateTime_PT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastRunDate_PT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_LastRunDateTime_PT",
							"value": {
								"value": "@formatDateTime(activity('LastRunDate_PT').output.FirstRow.LastRunDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LastRunDate_PO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Dim Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(ISNULL([LastRunDateTime], '1900-01-01') AS date) AS LastRunDateTime FROM [System].[Config]  WHERE setting = 'oa_podetail'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set _LastDateTime_PO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastRunDate_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_LastRunDateTime_PO",
							"value": {
								"value": "@formatDateTime(activity('LastRunDate_PO').output.FirstRow.LastRunDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load OA Fact PO",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set _LastDateTime_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "oa_fact_PurchaseOrder_df",
								"type": "DataFlowReference",
								"parameters": {
									"LastRunDate": {
										"value": "'@{variables('_LastRunDateTime_PO')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"podetail": {},
									"Supplier": {},
									"ActivityCode": {},
									"WorkStage": {},
									"Project": {},
									"FactSync": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UpdateLastRunDate_PO",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load OA Fact PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[System].[sp_UpdateLastRunDateTime]",
							"storedProcedureParameters": {
								"LastRunDate": {
									"value": {
										"value": "@formatDateTime(string(variables('_CurrentDate')), 'yyyy-MM-dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Setting": {
									"value": "oa_podetail",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LastRunDate_Tops",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Dim Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(ISNULL([LastRunDateTime], '1900-01-01') AS date) AS LastRunDateTime FROM [System].[Config]  WHERE setting = 'tops_jobs'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set _LastDateTime_Tops",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastRunDate_Tops",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_LastRunDateTime_Tops",
							"value": {
								"value": "@formatDateTime(activity('LastRunDate_Tops').output.FirstRow.LastRunDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load Tops Fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set _LastDateTime_Tops",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AOM_Jobs_df",
								"type": "DataFlowReference",
								"parameters": {
									"LastRunDate": {
										"value": "'@{variables('_LastRunDateTime_Tops')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"topsjobs": {},
									"Groups": {},
									"FactSync": {},
									"DimAOMGroup": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UpdateLastRunDate_Tops",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Tops Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[System].[sp_UpdateLastRunDateTime]",
							"storedProcedureParameters": {
								"LastRunDate": {
									"value": {
										"value": "@formatDateTime(string(variables('_CurrentDate')), 'yyyy-MM-dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Setting": {
									"value": "tops_jobs",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LastRunDate_QEW",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Dim Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(ISNULL([LastRunDateTime], '1900-01-01') AS date) AS LastRunDateTime FROM [System].[Config]  WHERE setting = 'qew'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TivoliDW_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set _LastDateTime_QEW",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastRunDate_QEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_LastRunDateTime_QEW",
							"value": {
								"value": "@formatDateTime(activity('LastRunDate_QEW').output.FirstRow.LastRunDateTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load Tops Fact_QEW",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set _LastDateTime_QEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact_QEW",
								"type": "DataFlowReference",
								"parameters": {
									"LastRunDate": {
										"value": "'@{variables('_LastRunDateTime_QEW')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"QEWDetail": {},
									"Project": {},
									"FactSync": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UpdateLastRunDate_QEW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Tops Fact_QEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[System].[sp_UpdateLastRunDateTime]",
							"storedProcedureParameters": {
								"LastRunDate": {
									"value": {
										"value": "@formatDateTime(string(variables('_CurrentDate')), 'yyyy-MM-dd')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"Setting": {
									"value": "qew",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ProjectTrans Summary",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateLastRunDate_PT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "DW.sp_FactProjectTransSummary"
						},
						"linkedServiceName": {
							"referenceName": "TiviliDW_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"_LastRunDateTime_GL": {
						"type": "String"
					},
					"_CurrentDate": {
						"type": "String"
					},
					"_LastRunDateTime_PT": {
						"type": "String"
					},
					"_LastRunDateTime_PO": {
						"type": "String"
					},
					"_LastRunDateTime_Tops": {
						"type": "String"
					},
					"_LastRunDateTime_QEW": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-11T10:30:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/oa_fact_GeneralLedger_df')]",
				"[concat(variables('factoryId'), '/dataflows/oa_fact_ProjectTransactions_df')]",
				"[concat(variables('factoryId'), '/dataflows/oa_fact_PurchaseOrder_df')]",
				"[concat(variables('factoryId'), '/dataflows/AOM_Jobs_df')]",
				"[concat(variables('factoryId'), '/dataflows/Fact_QEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_TOPSDatabase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Site data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_SitesData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Site data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Depot data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_DepotData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "OA Master data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_OAMasterData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Asset data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_AssetData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Employee data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_EmployeeData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OA Master data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email_copy2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Employee data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email_copy3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Depot data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email_copy5",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Asset data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Suppliers data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Export_SupplierData_To_CSV",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send error email_copy2_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Suppliers data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Error Handler",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "TOPS Database"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-02T14:37:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/03_00_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LoadCDSData_Applications",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "LoadCDSData_Reception",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-03T13:35:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 02_00 Stopped')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ProccessAOMData",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-01-08T15:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 3am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyOAProjCodesCmbtoReception",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "QEW Projects",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-03T15:17:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 7am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Import_CascadeToAZ_EmployeeData",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-03-14T16:36:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LoadFAandEmpData",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-11-29T00:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 5am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline_TOPSDatabase",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Create_Applications_ActiveEmployeesByManager",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-03-02T14:37:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_TOPSDatabase')]"
			]
		}
	]
}